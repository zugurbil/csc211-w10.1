import java.util.ArrayList;
import java.util.function.Predicate;

public class Main {
    public static void main(String[] args) {
        // Create an ArrayList and add 5 names
        ArrayList<String> names = new ArrayList<>();
        names.add("John");
        names.add("Amy");
        names.add("David");
        names.add("Eve");
        names.add("Mark");

        // Print the list before removing
        System.out.println("Before removing names longer than 4 characters: " + names);

        /****************************************************************************************************
         Predicate <T> is the type T - > Boolean
         Predicate<T> interface is a functional interface that represents a single argument function that 
         returns a boolean value. It is commonly used to evaluate whether a certain condition holds true 
         for a given input.
         Predicate is often used for filtering collections, evaluating conditions, or as part of functional 
         programming constructs in Java. T indicates that the Predicate can be used with any type.

        *****************************************************************************************************/

        // Define a Predicate to filter names longer than 4 characters
        Predicate<String> longerThanFour = name -> name.length() > 4;

        // Remove names that match the Predicate
        names.removeIf(longerThanFour);

        // Print the list after removing
        System.out.println("After removing names longer than 4 characters: " + names);
    }
}